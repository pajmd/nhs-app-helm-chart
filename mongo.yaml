#
# the sidecar container seems to need admin rights
#
# NOTE: The service account `default:default` already exists in k8s cluster.
# You can create a new account following like this:
#---
#apiVersion: v1
#kind: ServiceAccount
#metadata:
#  name: <new-account-name>
#  namespace: <namespace>
#
# Or create a new role and bind it 
# See:
# https://stackoverflow.com/questions/47973570/kubernetes-log-user-systemserviceaccountdefaultdefault-cannot-get-services
#
# To connect to the db:
# k run mongoshell --rm -it --image mongo -- sh
# mongo --host rs0/mongo-0.mongo.default.svc.cluster.local:27017,mongo-1.mongo.default.svc.cluster.local:27017,mongo-2.mongo.default.svc.cluster.local:27017
#
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: fabric8-rbac
subjects:
  - kind: ServiceAccount
    # Reference to upper's `metadata.name`
    name: default
    # Reference to upper's `metadata.namespace`
    namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
#  headless  service  for  monogo  statefulset
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    role: mongo
---
#  mongo-pub pupblic service for monogo statefulset
#
# This service won't cut it see for a possible solution
# https://github.com/helm/charts/issues/1569
#
# kubectl expose pod mongo-0 --type=NodePort
# kubectl expose pod mongo-1 --type=NodePort
# kubectl expose pod mongo-2 --type=NodePort
# k get services
# mongo mongodb://192.168.99.102:31051,192.168.99.102:3042,192.168.99.102:31108/replicaSet=rs0

---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongo-pub
#   labels:
#     name: mongo
# spec:
#   type: NodePort
#   ports:
#   - port: 27017
#     targetPort: 27017
#   selector:
#     role: mongo

---
# mongo statefulset
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  labels:
    name: mongo
spec:
  serviceName: "mongo"
  selector:
    matchLabels:
      role: mongo
  replicas: 3
  template:
    metadata:
      labels:
        role: mongo
        environment: test
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mongo
          image: mongo:3.4
          command:
            - mongod
            - "--replSet"
            - rs0
            - "--bind_ip"
            - 0.0.0.0
            - "--smallfiles"
            - "--noprealloc"
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
        # The sidecar checks is there are new k8s replica up or down and add them to the mongo replca set
        - name: mongo-sidecar
          image: cvallance/mongo-k8s-sidecar
          env:
            - name: MONGO_SIDECAR_POD_LABELS
              value: "role=mongo,environment=test"
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
      annotations:
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi


